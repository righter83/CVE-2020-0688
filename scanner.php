<?php

$url="https://".$argv[1]."/owa";
$file="out.txt";
error_reporting(0);
function check_version($url)
{
	//search version of Exchange
	$file="out.txt";
	$fn = fopen($file,"r");
	while(! feof($fn))
	{
	    $result = fgets($fn);
	    if(preg_match('/<link rel=\"shortcut icon\" href\=\"\/owa/' ,$result))
	    {
			echo "Checking $url\n";
	        $vv=explode("\"", $result);
			$v=explode('/', $vv[3]);
			if (preg_match('/14\./', $result))
			{
	        	$version=$v[2];
			}
			else
			{
				$version=$v[3];
			}
	        if (preg_match('/15\.0/', $version))
	        {
				if (preg_match('/15\.0\.1497/', $version))
				{
					echo "OK This Exchange 2013 ($url) is patched to $version\n\n";
				}
				else
				{
					echo "ERROR: This Exchange 2013 ($url) should have Version 15.0.1497.006 but has $version\n\n";
				}

	        }
	        elseif (preg_match('/15\.1/', $version))
	        {
                if (preg_match('/15\.1\.1913/', $version) || preg_match('/15\.1\.1847/', $version))
                {
                    echo "OK This Exchange 2016 ($url) is patched to $version\n\n";
                }
                else
                {
                    echo "ERROR: This Exchange 2016 ($url) should have Version 15.1.1847.007 or 15.1.1913.007 but has $version\n\n";
                }

	        }
	        elseif (preg_match('/15\.02/', $version))
	        {
                if (preg_match('/15\.2\.0529/', $version) || preg_match('/15\.2\.0464/', $version))
                {
                    echo "OK This Exchange 2019 ($url) is patched to $version\n\n";
                }
                else
                {
                    echo "ERROR: This Exchange 2019 ($url) should have Version 15.2.0529.008 or 15.2.0464.011 but has $version\n\n";
                }

	        }
	        elseif (preg_match('/14\./', $version))
	        {
                if (preg_match('/14\.3\.469/', $version))
                {
                    echo "OK This Exchange 2010 ($url) is patched to $version\n\n";
                }
                else
                {
                    echo "ERROR: This Exchange 2010 ($url) should have Version 14.3.0496.000 but has $version\n\n";
                }

	        }
	        elseif (preg_match('/8\./', $version))
	        {
				echo "ERROR: This Exchange 2007 ($url) has no supported patch UPGRADE!!\n\n";
    	    }

	        elseif (preg_match('/6\.5/', $version))
	        {
				echo "ERROR: This Exchange 2000 ($url) has no supported patch UPGRADE!!\n\n";
	        }
		}
	}
	fclose($fn);
}

function cidrl($cidr, &$error_code = 0, $callback = null)
{
    $error_code = 0;
    sscanf($cidr, "%[^/]/%u", $network, $bits);
    $addr = ip2long($network);
    if ($addr === false)
	{
        $error_code = 2;
        return false;
    }

    if ($bits == 32)
	{
        if (is_callable($callback))
		{
            $callback(long2ip($addr));
            return array();
        }
        return array(long2ip($addr));
    }

    if ($bits > 32)
	{
        $error_code = 3;
        return false;
    }

    $mask = ~(0xFFFFFFFF >> $bits);

    $addr_start = $addr & $mask;
    $addr_end = ($addr & $mask) | ~$mask;

    $addresses = array();
    for ($i = $addr_start; $i <= $addr_end; $i++)
	{
        if (is_callable($callback)) $callback(long2ip($i));
        else $addresses[] = long2ip($i);
    }
    return $addresses;
}

function Get_Content($server)
{
	// Get Redirect URL
	$ch = curl_init($server);
	curl_setopt($ch, CURLOPT_HEADER, false);
	curl_setopt($ch, CURLOPT_USERAGENT,'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.13) Gecko/20080311 Firefox/2.0.0.13');
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($ch, CURLOPT_BINARYTRANSFER, true);
	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
	curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
	curl_setopt($ch, CURLOPT_CONNECTTIMEOUT ,0);
	curl_setopt($ch, CURLOPT_TIMEOUT, 1);
	$html = curl_exec($ch);
	$redirectURL = curl_getinfo($ch,CURLINFO_EFFECTIVE_URL );
	curl_close($ch);

	// Get content and save in file
	$ch = curl_init($redirectURL);
	curl_setopt($ch, CURLOPT_HEADER, false);
	curl_setopt($ch, CURLOPT_USERAGENT,'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.13) Gecko/20080311 Firefox/2.0.0.13');
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($ch, CURLOPT_BINARYTRANSFER, true);
	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
	curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
	curl_setopt($ch, CURLOPT_CONNECTTIMEOUT ,0);
	curl_setopt($ch, CURLOPT_TIMEOUT, 1);
	$html = curl_exec($ch);
	curl_close($ch);
	$file="out.txt";
	file_put_contents($file, $html);
}


if (preg_match('/\//', $argv[1]))
{
	$arr=cidrl($argv[1]);
	foreach ($arr as $ip)
	{
		$url="https://$ip/owa";
		Get_Content($url);
		check_version($url);
	}
}
else
{
	Get_Content($url);
	check_version($url);
}

